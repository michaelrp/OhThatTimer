@page "/"
@using System.Timers
@using OhThatTimer.Utils

<h1>
    Oh <i>That</i> Timer
</h1>

<div class="card" style="width: 18rem;">
    <div class="card-body">
        <div class="text-center">
            @if (_showInput)
            {
                <input type="text" class="form-control form-control-lg time-entry" pattern="[0-9]*" value="@_currentTime"
                @oninput="@(e => TimeInput(e))">
            }
            else
            {
                <h1 class="display-3" @onclick="OpenInput">@_currentTime</h1>
            }
        </div>
        <div class="d-flex justify-content-between">
            <button type="button" class="btn @(_isRunning ? "btn-danger" : "btn-primary")" @onclick="StartStop">
                @if (_isRunning)
                {
                    <span class="oi oi-media-stop"></span>@(" Stop")
                }
                else
                {
                    <span class="oi oi-media-play"></span>@(" Start")
                }
            </button>
            <button type="button" class="btn btn-secondary" @onclick="Reset">
                <span class="oi oi-reload"></span> Reset
            </button>
        </div>
    </div>
    @* <div class="card-footer text-muted">
        <button type="button" class="btn btn-secondary" disabled="@(_isRunning)" @onclick="ReverseDirection">
            <span class="oi @_directionClass"></span> @_directionLabel
        </button>
    </div> *@
</div>

@code {
    private string? _currentTime;
    Timer? _timer;
    DateTime _startTime;
    TimeSpan _savedTime;
    TimeSpan _differenceTime;
    bool _isRunning;
    string _directionLabel = "Count Up";
    string _directionClass = "oi-arrow-top";
    bool _showInput = false;

    protected override void OnInitialized()
    {
        _currentTime = "0:00";

        _isRunning = false;
        _timer = new Timer(1000);
        _timer.Elapsed += async (sender, e) => await TimerTick(sender, e);
        _savedTime = GetTimeSpanFromInput(_currentTime);
        _differenceTime = new TimeSpan();
    }

    private bool IsCountingUp()
    => _directionLabel == "Count Up";

    public void ReverseDirection()
    {
        if (IsCountingUp())
        {
            _directionLabel = "Count Down";
            _directionClass = "oi-arrow-bottom";
        }
        else
        {
            _directionLabel = "Count Up";
            _directionClass = "oi-arrow-top";
        }
    }

    private TimeSpan GetTimeSpanFromInput(string input)
    {
        // This is the default value
        if (input == "0:00")
        {
            return new TimeSpan();
        }

        var hrs = 0;
        var min = 0;
        var sec = 0;

        var parts = input.Split(":");

        if (parts.Length == 1)
        {
            sec = int.Parse(parts[0]);
        }
        else if (parts.Length == 2)
        {
            min = int.Parse(parts[0]);
            sec = int.Parse(parts[1]);
        }
        else if (parts.Length == 3)
        {
            hrs = int.Parse(parts[0]);
            min = int.Parse(parts[1]);
            sec = int.Parse(parts[2]);
        }

        return new TimeSpan(hrs, min, sec);
    }

    private void TimeInput(ChangeEventArgs e)
    {
        _currentTime = string.Format(new InputTimeFormatter(), "{0}", e.Value);
        _savedTime = GetTimeSpanFromInput(_currentTime);
    }


    private async Task TimerTick(object? sender, ElapsedEventArgs e)
    {
        var updatedTime = DateTime.Now;

        if (IsCountingUp())
        {
            _differenceTime = (updatedTime - _startTime) + _savedTime;
        }
        @* else
        {
        } *@

        var format = _differenceTime.Hours < 1 ? @"m\:ss" : @"h\:mm\:ss";
        _currentTime = _differenceTime.ToString(format);

        this.StateHasChanged();
        await Task.CompletedTask;
    }

    private void StartStop()
    {
        if (_isRunning)
        {
            _timer?.Stop();
            _savedTime = _differenceTime;
            _isRunning = false;
        }
        else
        {
            _showInput = false;
            _startTime = DateTime.Now;
            _timer?.Start();
            _isRunning = true;
        }
    }

    private void Reset()
    {
        _timer?.Stop();
        _savedTime = new TimeSpan();
        _differenceTime = new TimeSpan();
        _isRunning = false;
        _currentTime = "0.00";
    }

    private void OpenInput()
    {
        if (!_isRunning)
        {
            _showInput = true;
        }
    }
}